pip3 install --user graphviz
In [1]: import pandas as pd
   ...: import graphviz
   ...: from sklearn import tree
   ...: from sklearn.metrics import confusion_matrix
   ...: 

In [2]: train = pd.read_csv('train.csv', sep=',
  File "<ipython-input-2-12e1cb1fa9a4>", line 1
    train = pd.read_csv('train.csv', sep=',
                                           ^
SyntaxError: EOL while scanning string literal


In [3]: train = pd.read_csv('train.csv', sep=',)
  File "<ipython-input-3-50c2f0a1a6da>", line 1
    train = pd.read_csv('train.csv', sep=',)
                                            ^
SyntaxError: EOL while scanning string literal


In [4]: train = pd.read_csv('train.csv', sep=',')

In [5]: test = pd.read_csv('test.csv', sep=',')

In [6]: train.describe()
Out[6]: 
               RI          Na          Mg          Al          Si           K  \
count  192.000000  192.000000  192.000000  192.000000  192.000000  192.000000   
mean     1.518415   13.395677    2.677188    1.431615   72.663854    0.481406   
std      0.003110    0.828530    1.460582    0.497477    0.781920    0.540507   
min      1.511150   10.730000    0.000000    0.290000   69.810000    0.000000   
25%      1.516528   12.897500    2.037500    1.187500   72.275000    0.130000   
50%      1.517680   13.280000    3.480000    1.355000   72.820000    0.555000   
75%      1.519200   13.802500    3.600000    1.620000   73.100000    0.610000   
max      1.533930   17.380000    4.490000    3.500000   75.410000    6.210000   

               Ca          Ba          Fe       Class  
count  192.000000  192.000000  192.000000  192.000000  
mean     8.989531    0.178437    0.056302    2.739583  
std      1.481001    0.510333    0.092348    2.090842  
min      5.430000    0.000000    0.000000    1.000000  
25%      8.240000    0.000000    0.000000    1.000000  
50%      8.600000    0.000000    0.000000    2.000000  
75%      9.157500    0.000000    0.100000    3.000000  
max     16.190000    3.150000    0.350000    7.000000  

In [7]: train_X = pd.DataFrame(train, columns=train.columns[:-1])

In [8]: train_Y = train['Class']

In [9]: test_X = pd.DataFrame(test, columns=test.columns[:-1])

In [10]: test_Y = test['Class']

In [11]: clf = tree.DecisionTreeClassifier()

In [12]: clf = clf.fit(train_X, train_Y)

In [13]: def show_plot():
    ...:     dot_data = tree.export_graphviz(clf, out_file=None,
    ...:                                     feature_names=train.columns[:-1],
    ...:                                     class_names=[str(x)
    ...:                                                  for x in [1, 2, 3, 4, 5, 6, 7]],
    ...:                                     filled=True, rounded=True)
    ...:     graph = graphviz.Source(dot_data)
    ...:     graph.view()
    ...:     

In [14]: shwo_plot()
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-14-93c6b4242822> in <module>()
----> 1 shwo_plot()

NameError: name 'shwo_plot' is not defined

In [15]: show_plot()

In [16]: 
(atril:6383): Gtk-WARNING **: Allocating size to EvSidebar 0x561fc6536f00 without calling gtk_widget_ge?
In [16]: 

In [16]: clf = tree.DecisionTreeClassifier()
    ...: clf = clf.fit(train_X, train_Y)
    ...: show_plot()
    ...: 

In [17]: 
(atril:9375): Gtk-WARNING **: Allocating size to EvSidebar 0x5559d6423f40 without calling gtk_widget_ge?
In [17]: 

In [17]: confusion_matrix(clf.predict(train_X), train_Y)
Out[17]: 
array([[64,  0,  0,  0,  0,  0],
       [ 0, 69,  0,  0,  0,  0],
       [ 0,  0, 15,  0,  0,  0],
       [ 0,  0,  0, 11,  0,  0],
       [ 0,  0,  0,  0,  7,  0],
       [ 0,  0,  0,  0,  0, 26]])

In [18]: sum(clf.predict(test_X) == test_Y) / len(test_X)
Out[18]: 0.5454545454545454

In [19]: sum(clf.predict(train_X) == train_Y) / len(train_X)
Out[19]: 1.0

In [27]: clf = tree.DecisionTreeClassifier(max_depth=4)

In [28]: clf = clf.fit(train_X, train_Y)

In [29]: confusion_matrix(clf.predict(train_X), train_Y)
Out[29]: 
array([[56, 16,  4,  0,  1,  1],
       [ 5, 47,  4,  1,  1,  1],
       [ 3,  4,  7,  0,  1,  1],
       [ 0,  2,  0, 10,  0,  0],
       [ 0,  0,  0,  0,  4,  0],
       [ 0,  0,  0,  0,  0, 23]])

In [30]: sum(clf.predict(train_X) == train_Y) / len(train_X)
Out[30]: 0.765625

In [31]: confusion_matrix(clf.predict(test_X), test_Y)
Out[31]: 
array([[5, 1, 2, 0, 0, 0],
       [1, 6, 0, 0, 2, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 0, 2, 0, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 3]])

In [32]: sum(clf.predict(test_X) == test_Y) / len(test_X)
Out[32]: 0.7272727272727273


