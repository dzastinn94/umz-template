In [1]: import pandas as pd
   ...: import seaborn as sns
   ...: import os
   ...: from sklearn.linear_model import LogisticRegression
   ...: import matplotlib.pyplot as plt
   ...: 

In [2]: lr_full = LogisticRegression()

In [3]: rtrain = pd.read_csv(os.path.join('train', 'train.tsv'), sep='\t', names
   ...: =[
   ...:                      "Occupancy", "date", "Temperature", "Humidity", "Li
   ...: ght", "CO2", "HumidityRatio"])

In [4]: lr = LogisticRegression()

In [5]: lr.fit(rtrain.CO2.values.reshape(-1, 1), rtrain.Occupancy)
Out[5]: 
LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,
          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,
          verbose=0, warm_start=False)

In [6]: lr_full = LogisticRegression()

In [7]: X = pd.DataFrame(
   ...:     rtrain, columns=['Temperature', 'Humidity', 'Light', 'CO2', 'Humidit
   ...: yRatio'])

In [8]: lr_full.fit(X, rtrain.Occupancy)
Out[8]: 
LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,
          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,
          verbose=0, warm_start=False)

In [9]: tp = sum((lr_full.predict(X) == rtrain.Occupancy) & (lr_full.predict(X) 
   ...: == 1))

In [10]: fn = sum((lr_full.predict(X) != rtrain.Occupancy) & (lr_full.predict(X)
    ...:  == 0))

In [11]: print('sensivity')
sensivity

In [12]: print(tp/(tp+fn))
0.9971081550028918

